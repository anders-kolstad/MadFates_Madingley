[["index.html", "Runniging the Madingley Model with Norwegian data Chapter 1 Introduction 1.1 Some useful links 1.2 Terms and definitions", " Runniging the Madingley Model with Norwegian data Anders L. Kolstad 2021-12-15 Chapter 1 Introduction This work is part of the MadFates project, run by Joachim TÃ¶pper. The goal is to learn bit about the Madingley model and its potential for modeling biomass distributions across trophic levels in Norwegian boreal ecosystem. Perhaps limited to forests. This page is hosted in GitHub and produced using bookdown. 1.1 Some useful links Paper on the R package Paper on the model itself 1.1.1 Examples of use Removing carnivores Land-use change 1.2 Terms and definitions Cohorts - Organisms with similar functional roles are grouped into cohorts which are treated as sinle entities in the model to reduce computational requirements. Stock - autotrofic biomass is treated as a single entity (stock). Model initialisation - After loading input data the model is run once without a year parameter. Not sure why exactly, or what the output is. Spin-up phase - The model needs to run for 100-1000 simulated years without any user modifications to allow the ecosystem componets to reach a stable state. HANPP - human appropriation of net primary productivity "],["installation.html", "Chapter 2 Installation", " Chapter 2 Installation Madingley is written in C++, but an R version is also available. Although a little bit less flexible perhaps, it should be more than sufficient four this project. And much more familiar. Madinley requires libm.so.6: version GLIBC_2.29. I thnk this is required for running the C++ executables. Perhaps its only requires on linux machines, i dont know. But in any case, the Rstudio server on NINA (Ubuntu 18.04) har libc6 v. 2.27 and IT dont want to upgrade due to dependencies with other software. Therefore Im forces to work locally on my Windows laptop. library(devtools) install_github(&#39;MadingleyR/MadingleyR&#39;, subdir=&#39;Package&#39;, build_vignettes = F, force = T) I still could not get the vignettes to build. It crashes between line 133-144 in Madingley.Rmd which is where madingley_run() is first used. MadingleyR::madingley_version() Versions are up-to-date. When trying to install this on the server I get the following error: ./madingley: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29 not found (required by ./madingley) running command cd /home/NINA.NO/anders.kolstad/R/x86_64-pc-linux-gnu-library/4.0/MadingleyR/lin_exec/ &amp;&amp; ./madingley version had status 1Error in x[[jj]][iseq] &lt;- vjj : replacement has length zero The vignette could not be build. vignette(package =&quot;MadingleyR&quot;) ## no vignettes found It can, however, be viewed here. "],["step-1---3.html", "Chapter 3 Step 1 - 3 3.1 Step 1 - Load data 3.2 Step 2 - Modify input parameters 3.3 Step 3 - Initialisation", " Chapter 3 Step 1 - 3 3.1 Step 1 - Load data Defining the study area in degree long-lat. spatial_window = c(31, 35, -5, -1) Plot the spatial window to check selection plot_spatialwindow(spatial_window) This corresponds to somewhere in the Serengetti I think. This is the default data to initialise the model. The spatial inputs is a relatively big list of raster files, but the others are small data frames. sptl_inp = madingley_inputs(&quot;spatial inputs&quot;) % Warning: package &#39;rgdal&#39; was built under R version 4.1.2 chrt_def = madingley_inputs(&quot;cohort definition&quot;) stck_def = madingley_inputs(&quot;stock definition&quot;) mdl_prms = madingley_inputs(&quot;model parameters&quot;) # useful later for running the model The Spatial Input is the environmental variables in the form of several raster layers. I think the 12 slots are months of a year. str(sptl_inp,2) % List of 13 % $ realm_classification :Formal class &#39;RasterLayer&#39; [package &quot;raster&quot;] with 12 slots % $ land_mask :Formal class &#39;RasterLayer&#39; [package &quot;raster&quot;] with 12 slots % $ hanpp :Formal class &#39;RasterLayer&#39; [package &quot;raster&quot;] with 12 slots % $ available_water_capacity :Formal class &#39;RasterLayer&#39; [package &quot;raster&quot;] with 12 slots % $ Ecto_max :Formal class &#39;RasterLayer&#39; [package &quot;raster&quot;] with 12 slots % $ Endo_C_max :Formal class &#39;RasterLayer&#39; [package &quot;raster&quot;] with 12 slots % $ Endo_H_max :Formal class &#39;RasterLayer&#39; [package &quot;raster&quot;] with 12 slots % $ Endo_O_max :Formal class &#39;RasterLayer&#39; [package &quot;raster&quot;] with 12 slots % $ terrestrial_net_primary_productivity:Formal class &#39;RasterBrick&#39; [package &quot;raster&quot;] with 12 slots % $ near-surface_temperature :Formal class &#39;RasterBrick&#39; [package &quot;raster&quot;] with 12 slots % $ precipitation :Formal class &#39;RasterBrick&#39; [package &quot;raster&quot;] with 12 slots % $ ground_frost_frequency :Formal class &#39;RasterBrick&#39; [package &quot;raster&quot;] with 12 slots % $ diurnal_temperature_range :Formal class &#39;RasterBrick&#39; [package &quot;raster&quot;] with 12 slots temp &lt;- sptl_inp$precipitation class(temp) % [1] &quot;RasterBrick&quot; % attr(,&quot;package&quot;) % [1] &quot;raster&quot; temp % class : RasterBrick % dimensions : 180, 360, 64800, 12 (nrow, ncol, ncell, nlayers) % resolution : 1, 1 (x, y) % extent : -180, 180, -90, 90 (xmin, xmax, ymin, ymax) % crs : NA % source : memory % names : precipitation_01, precipitation_02, precipitation_03, precipitation_04, precipitation_05, precipitation_06, precipitation_07, precipitation_08, precipitation_09, precipitation_10, precipitation_11, precipitation_12 % min values : 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 % max values : 660.1902, 580.5394, 528.9492, 519.1000, 571.3623, 867.7639, 897.7082, 815.6902, 585.4082, 610.5918, 569.8918, 637.4180 The resolution is 1 degree, which is approx. 111 km at the equator. Plotting monsth jan-april plot(temp[[1:4]]) rm(temp) The data has global coverage. The cohort definitions look like this, and can be modified by the user. DT::datatable(chrt_def, extensions = &quot;FixedColumns&quot;, options = list( scrollX = TRUE, scrollY=T, pageLength = 10)) The stock definitions are in the default input data limited to evergreen and deciduous plants. DT::datatable(stck_def, extensions = &quot;FixedColumns&quot;, options = list( scrollX = TRUE, scrollY=T, pageLength = 10)) The model parameters are perhaps a bit more cryptic: DT::datatable(mdl_prms, extensions = &quot;FixedColumns&quot;, options = list( scrollX = TRUE, scrollY=T, pageLength = 20)) They are divided into 12 categories: cat(unique(mdl_prms$category), sep=&quot;\\n&quot;) % Activity % Diffusive Dispersal % Responsive Dispersal % Eating Carnivory % Eating Omnivory % Eating Herbivory % Metabolism Ectotherm % Metabolism Endotherm % Metabolism Heterotroph % Mortality % Reproduction % Terrestrial Carbon 3.2 Step 2 - Modify input parameters We will not do any modifications at this stage 3.3 Step 3 - Initialisation Model initialisation is done using madingley_init() by supplying the input data above (excl. model parameters). Also one can set the maximum number of cohors allowed per cell. The default is 500 and max is 1000. a higher number increases computation time due to more cohort interactions. mdata &lt;- madingley_init(spatial_window = spatial_window, cohort_def = chrt_def, stock_def = stck_def, spatial_inputs = sptl_inp, max_cohort = 100) % Processing: realm_classification, land_mask, hanpp, available_water_capacity % Processing: Ecto_max, Endo_C_max, Endo_H_max, Endo_O_max % Processing: terrestrial_net_primary_productivity_1-12 % Processing: near-surface_temperature_1-12 % Processing: precipitation_1-12 % Processing: ground_frost_frequency_1-12 % Processing: diurnal_temperature_range_1-12 % Runtime is just a few seconds. str(mdata, 1) % List of 6 % $ cohorts :&#39;data.frame&#39;: 1584 obs. of 16 variables: % $ stocks :&#39;data.frame&#39;: 32 obs. of 3 variables: % $ cohort_def :&#39;data.frame&#39;: 9 obs. of 14 variables: % $ stock_def :&#39;data.frame&#39;: 2 obs. of 10 variables: % $ spatial_window: num [1:4] 31 35 -5 -1 % $ grid_size : num 1 The output contain the cohors and stocks for each pixel. save(mdata, chrt_def, mdl_prms, sptl_inp, stck_def, file = &quot;data/initOut_demo.RData&quot;) "],["step-4---spin-up-and-demonstrating-plotting-functions.html", "Chapter 4 Step 4 - Spin-up and demonstrating plotting functions", " Chapter 4 Step 4 - Spin-up and demonstrating plotting functions library(MadingleyR) knitr::opts_chunk$set(comment=&#39;%&#39;) load(&quot;data/initOut_demo.RData&quot;) The spin-up usualy requires a 100-1000 year simulation for the ecosystem parameters to stabilise. Here we will use just 2 years for demonstration. The function takes as input the output data fram madingley_init() as well as the standard model input variables /(which can be modified). The below code is the same as in the vignette example except I had to define my own output folder for some reason. mdata2 &lt;- madingley_run( out_dir = &quot;temp&quot;, madingley_data = mdata, years = 2, cohort_def = chrt_def, stock_def = stck_def, spatial_inputs = sptl_inp, model_parameters = mdl_prms, max_cohort = 100) % Processing: realm_classification, land_mask, hanpp, available_water_capacity % Processing: Ecto_max, Endo_C_max, Endo_H_max, Endo_O_max % Processing: terrestrial_net_primary_productivity_1-12 % Processing: near-surface_temperature_1-12 % Processing: precipitation_1-12 % Processing: ground_frost_frequency_1-12 % Processing: diurnal_temperature_range_1-12 # Runtime approx 30 sec # View the contents of mdata2 str(mdata2,1) % List of 10 % $ cohorts :&#39;data.frame&#39;: 1576 obs. of 16 variables: % $ stocks :&#39;data.frame&#39;: 32 obs. of 3 variables: % $ cohort_def :&#39;data.frame&#39;: 9 obs. of 14 variables: % $ stock_def :&#39;data.frame&#39;: 2 obs. of 10 variables: % $ time_line_cohorts:&#39;data.frame&#39;: 23 obs. of 11 variables: % $ time_line_stocks :&#39;data.frame&#39;: 23 obs. of 3 variables: % $ out_dir_name : chr &quot;/madingley_outs_15_12_21_15_23_02/&quot; % $ spatial_window : num [1:4] 31 35 -5 -1 % $ out_path : chr &quot;temp&quot; % $ grid_size : num 1 This output is similar to the previous outpur from madingley_init() only it also contains stocks and cohorts as timeslines. Lets view these timelines. plot_timelines(mdata2) % Warning in xtfrm.data.frame(x): cannot xtfrm data frames % Warning in xtfrm.data.frame(x): cannot xtfrm data frames Plot body mass density plot_densities(mdata2) % loading inputs from: temp/madingley_outs_15_12_21_15_23_02/ Plot trophic pyramid plot_trophicpyramid(mdata2) % loading inputs from: temp/madingley_outs_15_12_21_15_23_02/ Create log10-binned food-web plot plot_foodweb(mdata2, max_flows = 5) % loading inputs from: temp/madingley_outs_15_12_21_15_23_02/ Plot the spatial biomass plot_spatialbiomass(mdata2, functional_filter = TRUE) % loading inputs from: temp/madingley_outs_15_12_21_15_23_02/ "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
