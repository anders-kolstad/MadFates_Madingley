[["index.html", "Running the Madingley Model with Norwegian data Chapter 1 Introduction 1.1 Some useful links 1.2 Terms and definitions", " Running the Madingley Model with Norwegian data Anders L. Kolstad 2022-08-10 Chapter 1 Introduction This work is part of the MadFates project, run by Joachim Töpper. The goal is to learn bit about the Madingley model and its potential for modeling biomass distributions across trophic levels in Norwegian boreal ecosystem. Perhaps limited to forests. How can we validate the model? What can we use the model for? This page is hosted in GitHub and produced using bookdown. 1.1 Some useful links Paper on the R package Paper on the model itself 1.1.1 Examples of use Removing carnivores Land-use change 1.2 Terms and definitions Function group - Madingley divides animal species into 9 functional groups, confusingly numbered 0-8. 0 = Endothermic herbivores (e.g. moose) 1 = Endothermic carnivores (e.g. wolves) 2 = Endothermic omnivores (e.g. bears) 3 = Ectothermic semelparous herbivores (e.g. grasshoppers) 4 = Ectothermic semelparous carnivores (e.g. ants) 5 = Ectothermic semelparous omnivores (e.g. insects, snails) 6 = Ectothermic iteroparous herbivores (e.g. ?) 7 = Ectothermic iteroparous carnivores (e.g. snakes) 8 = Ectothermic iteroparous omnivores (e.g. ?) Cohorts - Although an individual based model, this just means that the model represents interactions between individuals, and not that it models each of these interactions uniquely. To reduce computational time, individuals are grouped into cohorts if they: belong to the same function group exists inthe same grid cell have identical continuous traits (e.g. body mass) Note that a cohort does not care about species identities. The user can set the number of cohorts. The default is 500 and the maximum in 1000. This is per cell. Dispersion - cohorts can disperse between grid cells Stocks - autotrophic biomass is is divided between deciduous and evergreen biomass and treated as a single entity (stock). Model initialisation - After loading input data the model is run once without a year parameter. Not sure why exactly, or what the output is. Spin-up phase - The model needs to run for 100-1000 simulated years without any user modifications to allow the ecosystem components to reach a stable state. HANPP - human appropriation of net primary productivity. The variable spans from zero (or actually with some points &lt;0 which I dont understand how to interpret) and 1200. Im not sure what the units are, but probably they are the same as for the autotrophic biomass. In case study 2 they simply set the value to a uniform value between zero and one in this way: sptl_inp$hanpp[] = fractional_veg_production[i] and set apply_hanpp =1 which reduces NPP in fractions provided in the hanpp spatial input raster. The example HANPP input data is from year 2005. library(MadingleyR) library(raster) sptl_inp = madingley_inputs(&quot;spatial inputs&quot;) ## Warning: package &#39;rgdal&#39; was built under R version 4.1.3 ## Reading default input rasters from: C:/Users/anders.kolstad/Documents/R/R-4.1.2/library/MadingleyR/spatial_input_rasters............. raster::plot(sptl_inp$hanpp, main = &quot;HANPP anno 2005&quot;) "],["installation.html", "Chapter 2 Installation", " Chapter 2 Installation Madingley is written in C++, but an R version is also available. Although a little bit less flexible perhaps, it should be more than sufficient four this project. And much more familiar. Madingley requires libm.so.6: version GLIBC_2.29. I think this is required for running the C++ executables. Perhaps its only requires on linux machines, i dont know. But in any case, the Rstudio server on NINA (Ubuntu 18.04) has libc6 v. 2.27 and IT dont want to upgrade due to dependencies with other software. Therefore Im forces to work locally on my Windows laptop. library(devtools) install_github(&#39;MadingleyR/MadingleyR&#39;, subdir=&#39;Package&#39;, build_vignettes = F, force = T) I still could not get the vignettes to build. It crashes between line 133-144 in Madingley.Rmd which is where madingley_run() is first used. MadingleyR::madingley_version() Versions are up-to-date. When trying to install this on the server I get the following error: ./madingley: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29 not found (required by ./madingley) running command cd /home/NINA.NO/anders.kolstad/R/x86_64-pc-linux-gnu-library/4.0/MadingleyR/lin_exec/ &amp;&amp; ./madingley version had status 1Error in x[[jj]][iseq] &lt;- vjj : replacement has length zero The vignette could not be build. vignette(package =&quot;MadingleyR&quot;) ## no vignettes found It can, however, be viewed here. "],["step-1---3.html", "Chapter 3 Step 1 - 3 3.1 Step 1 - Load data 3.2 Step 2 - Modify input parameters 3.3 Step 3 - Initialisation", " Chapter 3 Step 1 - 3 3.1 Step 1 - Load data Defining the study area in degree long-lat. spatial_window = c(31, 35, -5, -1) Plot the spatial window to check selection plot_spatialwindow(spatial_window) This corresponds to somewhere in the Serengetti I think. Now I will define the input data - madingley_inputs() just contains the default data to initialise the model. All of these can be twaked by the user, which I will do later in the Norwegian example. The spatial inputs is a relatively big list of raster files, but the others are small data frames. sptl_inp = madingley_inputs(&quot;spatial inputs&quot;) % Warning: package &#39;rgdal&#39; was built under R version 4.1.2 chrt_def = madingley_inputs(&quot;cohort definition&quot;) stck_def = madingley_inputs(&quot;stock definition&quot;) mdl_prms = madingley_inputs(&quot;model parameters&quot;) # useful later for running the model The Spatial Input is the environmental variables in the form of several raster layers. I think the 12 slots are months of a year. str(sptl_inp,2) % List of 13 % $ realm_classification :Formal class &#39;RasterLayer&#39; [package &quot;raster&quot;] with 12 slots % $ land_mask :Formal class &#39;RasterLayer&#39; [package &quot;raster&quot;] with 12 slots % $ hanpp :Formal class &#39;RasterLayer&#39; [package &quot;raster&quot;] with 12 slots % $ available_water_capacity :Formal class &#39;RasterLayer&#39; [package &quot;raster&quot;] with 12 slots % $ Ecto_max :Formal class &#39;RasterLayer&#39; [package &quot;raster&quot;] with 12 slots % $ Endo_C_max :Formal class &#39;RasterLayer&#39; [package &quot;raster&quot;] with 12 slots % $ Endo_H_max :Formal class &#39;RasterLayer&#39; [package &quot;raster&quot;] with 12 slots % $ Endo_O_max :Formal class &#39;RasterLayer&#39; [package &quot;raster&quot;] with 12 slots % $ terrestrial_net_primary_productivity:Formal class &#39;RasterBrick&#39; [package &quot;raster&quot;] with 12 slots % $ near-surface_temperature :Formal class &#39;RasterBrick&#39; [package &quot;raster&quot;] with 12 slots % $ precipitation :Formal class &#39;RasterBrick&#39; [package &quot;raster&quot;] with 12 slots % $ ground_frost_frequency :Formal class &#39;RasterBrick&#39; [package &quot;raster&quot;] with 12 slots % $ diurnal_temperature_range :Formal class &#39;RasterBrick&#39; [package &quot;raster&quot;] with 12 slots temp &lt;- sptl_inp$precipitation class(temp) % [1] &quot;RasterBrick&quot; % attr(,&quot;package&quot;) % [1] &quot;raster&quot; temp % class : RasterBrick % dimensions : 180, 360, 64800, 12 (nrow, ncol, ncell, nlayers) % resolution : 1, 1 (x, y) % extent : -180, 180, -90, 90 (xmin, xmax, ymin, ymax) % crs : NA % source : memory % names : precipitation_01, precipitation_02, precipitation_03, precipitation_04, precipitation_05, precipitation_06, precipitation_07, precipitation_08, precipitation_09, precipitation_10, precipitation_11, precipitation_12 % min values : 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 % max values : 660.1902, 580.5394, 528.9492, 519.1000, 571.3623, 867.7639, 897.7082, 815.6902, 585.4082, 610.5918, 569.8918, 637.4180 The resolution is 1 degree, which is approx. 111 km at the equator. Plotting precipitation for months jan-april plot(temp[[1:4]]) rm(temp) The data has global coverage. Im assuming this is WorldClim data, but not sure. The cohort definitions look like this, and can be modified by the user. DT::datatable(chrt_def, extensions = &quot;FixedColumns&quot;, options = list( scrollX = TRUE, scrollY=T, pageLength = 10)) The stock definitions are in the default input data limited to evergreen and deciduous plants. DT::datatable(stck_def, extensions = &quot;FixedColumns&quot;, options = list( scrollX = TRUE, scrollY=T, pageLength = 10)) The model parameters are perhaps a bit more cryptic: DT::datatable(mdl_prms, extensions = &quot;FixedColumns&quot;, options = list( scrollX = TRUE, scrollY=T, pageLength = 20)) They are divided into 12 categories: cat(unique(mdl_prms$category), sep=&quot;\\n&quot;) % Activity % Diffusive Dispersal % Responsive Dispersal % Eating Carnivory % Eating Omnivory % Eating Herbivory % Metabolism Ectotherm % Metabolism Endotherm % Metabolism Heterotroph % Mortality % Reproduction % Terrestrial Carbon 3.2 Step 2 - Modify input parameters We will not do any modifications at this stage 3.3 Step 3 - Initialisation Model initialisation is done using madingley_init() by supplying the input data above (excl. model parameters). Also one can set the maximum number of cohorts allowed per cell. The default is 500 and max is 1000. a higher number increases computation time due to more cohort interactions. mdata &lt;- madingley_init(spatial_window = spatial_window, cohort_def = chrt_def, stock_def = stck_def, spatial_inputs = sptl_inp, max_cohort = 100) % Processing: realm_classification, land_mask, hanpp, available_water_capacity % Processing: Ecto_max, Endo_C_max, Endo_H_max, Endo_O_max % Processing: terrestrial_net_primary_productivity_1-12 % Processing: near-surface_temperature_1-12 % Processing: precipitation_1-12 % Processing: ground_frost_frequency_1-12 % Processing: diurnal_temperature_range_1-12 % Run time is just a few seconds. str(mdata, 1) % List of 6 % $ cohorts :&#39;data.frame&#39;: 1584 obs. of 16 variables: % $ stocks :&#39;data.frame&#39;: 32 obs. of 3 variables: % $ cohort_def :&#39;data.frame&#39;: 9 obs. of 14 variables: % $ stock_def :&#39;data.frame&#39;: 2 obs. of 10 variables: % $ spatial_window: num [1:4] 31 35 -5 -1 % $ grid_size : num 1 The output contain the cohorts and stocks for each pixel. save(mdata, chrt_def, mdl_prms, sptl_inp, stck_def, file = &quot;data/initOut_demo.RData&quot;) "],["step-4---spin-up-and-demonstrating-plotting-functions.html", "Chapter 4 Step 4 - Spin-up and demonstrating plotting functions", " Chapter 4 Step 4 - Spin-up and demonstrating plotting functions library(MadingleyR) knitr::opts_chunk$set(comment=&#39;%&#39;) load(&quot;data/initOut_demo.RData&quot;) The spin-up usualy requires a 100-1000 year simulation for the ecosystem parameters to stabilise. Here we will use just 2 years for demonstration. The function takes as input the output data fram madingley_init() as well as the standard model input variables (which can be modified). The below code is the same as in the vignette example except I had to define my own output folder for some reason. mdata2 &lt;- madingley_run( out_dir = &quot;temp&quot;, madingley_data = mdata, years = 2, cohort_def = chrt_def, stock_def = stck_def, spatial_inputs = sptl_inp, model_parameters = mdl_prms, max_cohort = 100) % Processing: realm_classification, land_mask, hanpp, available_water_capacity % Processing: Ecto_max, Endo_C_max, Endo_H_max, Endo_O_max % Processing: terrestrial_net_primary_productivity_1-12 % Processing: near-surface_temperature_1-12 % Processing: precipitation_1-12 % Processing: ground_frost_frequency_1-12 % Processing: diurnal_temperature_range_1-12 # Runtime approx 30 sec # View the contents of mdata2 str(mdata2,1) % List of 10 % $ cohorts :&#39;data.frame&#39;: 1581 obs. of 16 variables: % $ stocks :&#39;data.frame&#39;: 32 obs. of 3 variables: % $ cohort_def :&#39;data.frame&#39;: 9 obs. of 14 variables: % $ stock_def :&#39;data.frame&#39;: 2 obs. of 10 variables: % $ time_line_cohorts:&#39;data.frame&#39;: 23 obs. of 11 variables: % $ time_line_stocks :&#39;data.frame&#39;: 23 obs. of 3 variables: % $ out_dir_name : chr &quot;/madingley_outs_16_12_21_15_38_33/&quot; % $ spatial_window : num [1:4] 31 35 -5 -1 % $ out_path : chr &quot;temp&quot; % $ grid_size : num 1 This output is similar to the previous outpur from madingley_init() only it also contains stocks and cohorts as timeslines. Lets view these timelines. plot_timelines(mdata2) % Warning in xtfrm.data.frame(x): cannot xtfrm data frames % Warning in xtfrm.data.frame(x): cannot xtfrm data frames Plot histograms for body mass: plot_densities(mdata2) % loading inputs from: temp/madingley_outs_16_12_21_15_38_33/ Plot trophic pyramid plot_trophicpyramid(mdata2) % loading inputs from: temp/madingley_outs_16_12_21_15_38_33/ Create log10-binned food-web plot plot_foodweb(mdata2, max_flows = 5) % loading inputs from: temp/madingley_outs_16_12_21_15_38_33/ Plot the spatial biomass plot_spatialbiomass(mdata2, functional_filter = TRUE) % loading inputs from: temp/madingley_outs_16_12_21_15_38_33/ save(mdata2, chrt_def, mdl_prms, sptl_inp, stck_def, file = &quot;data/spinupOut_demo.RData&quot;) "],["norway---default-settings.html", "Chapter 5 Norway - default settings 5.1 16 grid cells 5.2 Single grid cell 5.3 Biomass densities rather than total biomass", " Chapter 5 Norway - default settings This is just a first look at what the model predicts for Norway with default settings. This page was last updated 2022-08-10 14:56:06 First we try with 4 x 4 grid cells (16 grid cells, with dispersion) in south-central Norway. Then we try with just one grid cell, but a longer temporal scope. 5.1 16 grid cells Lets start with a too big bonding box for illustration. spatial_window = c(5, 12, 58, 65) plot_spatialwindow(spatial_window) The default resolution is 1 degree, giving (7 x 7 =) 49 cells in this case, which is too much for testing purpuses due to compuatation time. The resolution is defined by the spatial input rasters, but 1 degree resolution is the maximum. Finer resolution is possible, ut not courser. I will therefore focus on just Central Norway. Plotting on top of mean annual temperature. mat = mean(sptl_inp[[10]]) spatial_window = c(6, 10, 59, 63) plot_spatialwindow(spatial_window, ylim=c(55,65), xlim=c(-10,20), input_raster = mat) Notice how at high latitudes, one degree north-south is much longer in distance compared to 1 degree east-west. Run time: approx 5 sec. mdata &lt;- madingley_init(spatial_window = spatial_window, cohort_def = chrt_def, stock_def = stck_def, spatial_inputs = sptl_inp, max_cohort = 100) % Processing: realm_classification, land_mask, hanpp, available_water_capacity % Processing: Ecto_max, Endo_C_max, Endo_H_max, Endo_O_max % Processing: terrestrial_net_primary_productivity_1-12 % Processing: near-surface_temperature_1-12 % Processing: precipitation_1-12 % Processing: ground_frost_frequency_1-12 % Processing: diurnal_temperature_range_1-12 % Running the model for 100 years with default setting, exept the max limit og 100 cohorts per grid cell. mdata2 &lt;- madingley_run( out_dir = &quot;temp&quot;, madingley_data = mdata, years = 100, cohort_def = chrt_def, stock_def = stck_def, spatial_inputs = sptl_inp, model_parameters = mdl_prms, max_cohort = 100, silenced = TRUE) # Runtime approx 15 sec for 10 years and 2 min for 100 years Save the output. save(mdata2, chrt_def, mdl_prms, sptl_inp, stck_def, file = &quot;data/NorwayDefaultSpinup.RData&quot;) And read back load(&quot;data/NorwayDefaultSpinup.RData&quot;) plot_timelines(mdata2) % Warning in xtfrm.data.frame(x): cannot xtfrm data frames % Warning in xtfrm.data.frame(x): cannot xtfrm data frames The 100 year spin up was seemingly enough, and we can see the variation stabelising rather quickly. The seasonal patterns are visible for both autotrophs and heterotrophs, but is it big enough? Interestingly, when I ran this same code in December 2021, albeit for 10 year only, I got plant biomass that was orders of magnitude higher. The model actually predicted biomass about 50% higher than the total terrestrial biomass on the planet. I reported this to the developers, and they have now hopefully fixed it. Figure: Snapshot of the result from doing a 10 year spin up for the same spatial window, using defoult setting, in December 2021. Lets look at the pattern in autotrophic biomass without the log transformation temp &lt;- mdata2$time_line_stocks temp &lt;- temp[temp$Year &gt;90,] # last 10 years of the simulation ggplot(data = temp, aes(x = Month, y = TotalStockBiomass/10^12))+ geom_line(lwd = 1.5, colour = &quot;grey&quot;)+ geom_point(size = 3 )+ theme_bw()+ ylab(&quot;Autrophic biomass (megatons)&quot;)+ ylim(c(0,0.25)) Actually, this is not unreasonable. Perhaps the biomass even drops too much in winter, seeing how a lot of it should be woody, perennial biomass. Unfortunately Im not able to extract the biomass for deciduous and coniferous plant separately, except for the last year. This is the mean over the last year I think: temp &lt;- mdata2$stocks # sum across the 16 grid cells temp &lt;- aggregate(data = temp, TotalBiomass~FunctionalGroupIndex, FUN = sum) #rename temp$FunctionalType &lt;- ifelse(temp$FunctionalGroupIndex==0, &quot;Decidious&quot;, &quot;Evergreen&quot;) #plot ggplot(data = temp, aes(x = FunctionalType, y = TotalBiomass/10^12))+ geom_bar( stat = &quot;identity&quot;, fill = &quot;grey&quot;, colour = &quot;grey20&quot;, size=2)+ theme_bw()+ ylab(&quot;Autrophic biomass (megatons)&quot;) This ratio makes sense, and could be tested using landsskogtakseringen. But the numbers are really big! There is a mistake here. Perhaps he page developers didnt update this part of the output? There should be almost no biomass in winter for ectothermic, semelparous species (e.g. FG3). temp &lt;- mdata2$time_line_cohorts ggplot(data = temp, aes(x = Month, y = Biomass_FG_3/10^6), group = )+ geom_line(lwd = 1, colour = &quot;black&quot;)+ theme_bw()+ ylab(&quot;Biomass (tons) for herbivorous,\\nectothermic and semelparous species&quot;) The model is very unstabel here for a long time, I we cannot really trust the results. But looking a bit closer a the last 10 years: temp &lt;- mdata2$time_line_cohorts temp &lt;- temp[temp$Year&gt;90,] ggplot(data = temp[temp$Year&gt;90,], aes(x = Month, y = Biomass_FG_3/10^6), group = )+ geom_line(lwd = 1, colour = &quot;black&quot;)+ geom_point(size = 3 )+ theme_bw()+ ylab(&quot;Biomass (tons) for herbivorous,\\nectothermic and semelparous species&quot;) Here we actually see the biomass getting quite close to zero in winter, as predicted. I winder if we could ever get some data to validate these numbers for insect biomass. Bird migration I dont think is accounted for. Looking at the log transformed data I thought getting the Madingley model to capture the seasonal change would perhaps be the biggest issue, but these last figures are more promising. What are the most dominant functional groups? This is also quite difficult to read from log transformed figures. Lets explore the total biomass in august of the last year. #First,let make more intuitive names for the functional groups. link &lt;- data.frame( FG = seq(0,8,1), FGname = c(&quot;Endo. herb.&quot;, &quot;Endo. carn.&quot;, &quot;Endo. omni.&quot;, &quot;Ecto. sem. herb.&quot;, # semelparous (insect etc) &quot;Ecto. sem. carn.&quot;, &quot;Ecto. sem. omni.&quot;, &quot;Ecto. itero. herb.&quot;, # iteroparous (reptiles etc) &quot;Ecto. itero. carn.&quot;, &quot;Ecto. itero. omni.&quot; ) ) temp &lt;- mdata2$time_line_cohorts temp &lt;- temp[temp$Month == max(temp$Month)-4,] data.table::setDT(temp) tempM &lt;- data.table::melt(temp[,-c(1:2)]) % Warning in melt.data.table(temp[, -c(1:2)]): id.vars and measure.vars are % internally guessed when both are &#39;NULL&#39;. All non-numeric/integer/logical type % columns are considered id.vars, which in this case are columns []. Consider % providing at least one of &#39;id&#39; or &#39;measure&#39; vars in future. tempM$FG &lt;- link$FGname tempM$tons &lt;- tempM$value/10^6 ggplot(data = tempM, aes(x = FG, y = tons))+ geom_bar(stat = &quot;identity&quot;, fill = &quot;grey&quot;, colour = &quot;grey30&quot;)+ coord_flip()+ theme_bw() What are the endothermic omnivores in Norway. Mice and things? And bears? The model predicts very little endothermic carnivore biomass, and quite a bit of ectothermic iteroparous carnivore biomass (snakes?!) We can look at the relationship between individual size (mean per grid cell) and abundance for herbivorous endotherms temp &lt;- mdata2$cohorts temp &lt;- temp[temp$FunctionalGroupIndex==0,] ggplot(data = temp)+ geom_point(aes(x = log(IndividualBodyMass), y = log(CohortAbundance) ), alpha=.1, size=8, colour=&quot;blue&quot;, pch=16)+ theme_bw(base_size = 20) # plotting all grid cells and all cohorts or FG 0 No strong pattern. This is perhaps not very useful, but simply illustrates the two factors that determine the cohort biomass. Lets explore the cohort data set (mdata2$cohorts) a bit more. temp &lt;- mdata2$cohorts summary(temp) % GridcellIndex FunctionalGroupIndex JuvenileMass AdultMass % Min. : 0.000 Min. :0.000 Min. : 0.154 Min. : 2.3 % 1st Qu.: 4.000 1st Qu.:2.000 1st Qu.: 7.490 1st Qu.: 255.4 % Median : 7.000 Median :6.000 Median : 35.138 Median : 1164.1 % Mean : 7.503 Mean :4.713 Mean : 437.553 Mean : 13279.2 % 3rd Qu.:11.000 3rd Qu.:7.000 3rd Qu.: 190.477 3rd Qu.: 8183.1 % Max. :15.000 Max. :8.000 Max. :21664.900 Max. :343190.0 % IndividualBodyMass CohortAbundance LogOptimalPreyBodySizeRatio % Min. : 0.2 Min. :1.000e+00 Min. :-2.716510 % 1st Qu.: 65.4 1st Qu.:8.348e+03 1st Qu.:-2.462430 % Median : 406.2 Median :2.327e+05 Median :-2.344680 % Mean : 7630.8 Mean :1.514e+08 Mean :-2.340085 % 3rd Qu.: 2758.2 3rd Qu.:3.732e+06 3rd Qu.:-2.207560 % Max. :341799.0 Max. :1.648e+11 Max. : 0.006092 % BirthTimeStep ProportionTimeActive TrophicIndex % Min. :1061 Min. :0.0000 Min. :2.000 % 1st Qu.:1171 1st Qu.:0.0000 1st Qu.:2.000 % Median :1193 Median :0.0000 Median :2.025 % Mean :1181 Mean :0.1647 Mean :2.411 % 3rd Qu.:1194 3rd Qu.:0.5000 3rd Qu.:3.000 % Max. :1195 Max. :0.5000 Max. :3.971 % IndividualReproductivePotentialMass MaturityTimeStep IsAdult % Min. : 0.00 Min. :1.115e+03 Min. :0.0000 % 1st Qu.: 0.00 1st Qu.:1.193e+03 1st Qu.:0.0000 % Median : 0.00 Median :4.295e+09 Median :0.0000 % Mean : 3818.88 Mean :2.692e+09 Mean :0.3733 % 3rd Qu.: 37.89 3rd Qu.:4.295e+09 3rd Qu.:1.0000 % Max. :280520.00 Max. :4.295e+09 Max. :1.0000 % AgeMonths TimeStepsJuviline TimeStepsAdult % Min. : 4.00 Min. : 3.00 Min. : 0.000 % 1st Qu.: 5.00 1st Qu.: 5.00 1st Qu.: 0.000 % Median : 6.00 Median : 6.00 Median : 0.000 % Mean : 18.28 Mean :11.74 Mean : 6.545 % 3rd Qu.: 28.00 3rd Qu.:16.00 3rd Qu.: 6.000 % Max. :138.00 Max. :77.00 Max. :84.000 There are 16 cell, and 100 cohorts (row) per cell (because I set 100 as the limit). There are 9 functional groups. Some functional groups have many cohorts per cell. temp &lt;- mdata2$cohorts[mdata2$cohorts$GridcellIndex==0,] temp &lt;- data.frame(table(temp$FunctionalGroupIndex)) temp2 &lt;- mdata2$cohorts[mdata2$cohorts$GridcellIndex==5,] temp2 &lt;- data.frame(table(temp2$FunctionalGroupIndex)) names(temp2)[1] &lt;- &quot;FG&quot; names(temp)[1] &lt;- &quot;FG&quot; temp2$Freq2 &lt;- temp$Freq[match(temp2$FG, temp$FG)] data.table::setDT(temp2) temp3 &lt;- data.table::melt(temp2, id.vars = &quot;FG&quot;, variable.name = &quot;grid_cell&quot;, value.name = &quot;cohorts&quot;) temp3$cohorts[is.na(temp3$cohorts)] &lt;- 0 temp3$cohorts2 &lt;- as.numeric(temp3$cohorts) temp3$functional_group &lt;- as.numeric(temp3$FG) temp3$grid_cell &lt;- as.character(temp3$grid_cell) temp3$grid_cell[temp3$grid_cell == &quot;Freq&quot;] &lt;- &quot;zero&quot; temp3$grid_cell[temp3$grid_cell == &quot;Freq2&quot;] &lt;- &quot;five&quot; temp3$names &lt;- link$FGname[match(temp3$FG, link$FG)] ggplot(data = temp3, aes(x = names, y = cohorts, group = grid_cell, fill = grid_cell ))+ geom_bar(stat = &quot;identity&quot;, position = &quot;dodge&quot;, colour=&quot;black&quot;)+ coord_flip()+ ylab(&quot;Number of cohorts&quot;)+ xlab(&quot;&quot;)+ scale_fill_brewer(palette=&quot;Spectral&quot;) As we can see, endothermic herbivores (e.g. moose) have the most cohorts in these two cells. They also have the biggest biomass besides plants, as we have seen previously. Endothermic carnivores is not very abundant. But what separates the endothermic herbivore cohorts? Lets look some more at differences between the functional groups. A high cohort abundance means you have a high number of similar individuals (e.g. similar in age and size). temp &lt;- mdata2$cohorts temp2 &lt;- aggregate(data = temp, IndividualBodyMass~factor(FunctionalGroupIndex), FUN = mean) temp2$CohortAbundance &lt;- aggregate(data = temp, CohortAbundance~factor(FunctionalGroupIndex), FUN = mean)[,2] names(temp2)[1]&lt;- &quot;FG&quot; temp2$FG &lt;- as.character(temp2$FG) temp2$FGname &lt;- link$FGname[match(temp2$FG, link$FG)] #ggplot(temp2, aes(x = CohortAbundance, # y = IndividualBodyMass, # label = FGname))+ # geom_text(size = 5, position = position_dodge2v(2000))+ # theme_bw(base_size = 20)+ # scale_y_continuous(expand = expansion(mult=c(.2,.2)))+ # scale_x_continuous(expand = expansion(mult=c(.2,.2))) ggplot(data = temp2, aes(x = FGname, y = CohortAbundance))+ geom_bar(stat = &quot;identity&quot;, fill = &quot;grey&quot;, colour = &quot;grey30&quot;)+ coord_flip()+ theme_bw()+ ylab(&quot;Avg. #individuals per cohort&quot;) Ectothermic semelparous herbivores (insects) really stick out as being numerous and similar. Note that other functional groups may be more numerous than what this figure shows, because they are split over more cohorts. temp &lt;- mdata2$cohorts temp2 &lt;- aggregate(data = temp, CohortAbundance~factor(FunctionalGroupIndex), FUN = sum) names(temp2)[1]&lt;- &quot;FG&quot; names(temp2)[2]&lt;- &quot;CohortSum&quot; temp2$FG &lt;- as.character(temp2$FG) temp2$FGname &lt;- link$FGname[match(temp2$FG, link$FG)] ggplot(data = temp2, aes(x = FGname, y = CohortSum))+ geom_bar(stat = &quot;identity&quot;, fill = &quot;grey&quot;, colour = &quot;grey30&quot;)+ coord_flip()+ theme_bw()+ ylab(&quot;Total number of individuals&quot;) The patter is the same for total number of individuals. Now we can look at the cohort biomass distribution for each of the functional groups using this built in function. plot_densities(mdata2) % loading inputs from: temp/madingley_outs_09_08_22_13_49_03/ This figure is showing the distribution of total cohort biomass for each FG. For Herbivores (top left), the distribution is left-skewed, telling us that there is a threshold for how big a cohort can get. This can be due to reproductive limitations or perhaps intraspecific competition leading to starvation or dispersal. Ectotherm biomass has a clear optimum, but no limitation in size, probably due to high plasticity in reproductive rates. And here, the trophic pyramid: plot_trophicpyramid(mdata2) % loading inputs from: temp/madingley_outs_09_08_22_13_49_03/ Se the page on trophic pyramids for a more detailed exploration of this figure and what it contains. Create log10-binned food-web plot plot_foodweb(mdata2, max_flows = 5) % loading inputs from: temp/madingley_outs_09_08_22_13_49_03/ The interactions are dominated by endothermic omnivores (mice?) eating endothermic herbivores. Im not sure if this is interactions summed over one year, or what. Plot the spatial biomass plot_spatialbiomass(mdata2, functional_filter = TRUE) % loading inputs from: temp/madingley_outs_09_08_22_13_49_03/ There are strong spatial patterns. FG1 for example, endothermic carnivores, are just about absent in many grid cells. The next step I think is to go though the model parameters in mdl_prms and see if the settings make sense for boreal, mainly forested or alpine, ecosystem. We can also change values in the spatial input sptl_inp, for example setting the max biomass for ectotherms (we dont have large reptiles here). 5.2 Single grid cell Using a single grid cell we can run the simulation for longer, and see how that affects things. spatial_window = c(9, 10, 60, 61) plot_spatialwindow(spatial_window, ylim=c(55,65), xlim=c(-10,20), input_raster = mat) mdata &lt;- madingley_init(spatial_window = spatial_window, cohort_def = chrt_def, stock_def = stck_def, spatial_inputs = sptl_inp, max_cohort = 100) % Processing: realm_classification, land_mask, hanpp, available_water_capacity % Processing: Ecto_max, Endo_C_max, Endo_H_max, Endo_O_max % Processing: terrestrial_net_primary_productivity_1-12 % Processing: near-surface_temperature_1-12 % Processing: precipitation_1-12 % Processing: ground_frost_frequency_1-12 % Processing: diurnal_temperature_range_1-12 % Using 200 years instead of 100 mdata2 &lt;- madingley_run( out_dir = &quot;temp&quot;, madingley_data = mdata, years = 200, cohort_def = chrt_def, stock_def = stck_def, spatial_inputs = sptl_inp, model_parameters = mdl_prms, max_cohort = 100, silenced = TRUE) # Runtime approx 2-3 min Save the output. save(mdata2, #, chrt_def, mdl_prms, sptl_inp, stck_def, file = &quot;data/NorwayDefaultSpinup_1cell.RData&quot;) And read back load(&quot;data/NorwayDefaultSpinup_1cell.RData&quot;) plot_timelines(mdata2) % Warning in xtfrm.data.frame(x): cannot xtfrm data frames % Warning in xtfrm.data.frame(x): cannot xtfrm data frames Looks messy. Plant biomass years 190-200 temp &lt;- mdata2$time_line_stocks temp &lt;- temp[temp$Year &gt;190,] # last 10 years of the simulation ggplot(data = temp, aes(x = Month, y = TotalStockBiomass/10^12))+ geom_line(lwd = 1.5, colour = &quot;grey&quot;)+ geom_point(size = 3 )+ theme_bw()+ ylab(&quot;Autrophic biomass (megatons)&quot;)+ ylim(c(0,0.025)) Pattern is the same as before, but the values are a lot lower! Insect herbivores years 190-200: temp &lt;- mdata2$time_line_cohorts temp &lt;- temp[temp$Year&gt;90,] ggplot(data = temp[temp$Year&gt;90,], aes(x = Month, y = Biomass_FG_3/10^6), group = )+ geom_line(lwd = 1, colour = &quot;black&quot;)+ geom_point(size = 3 )+ theme_bw()+ ylab(&quot;Biomass (tons) for herbivorous,\\nectothermic and semelparous species&quot;) Again, values are a lot lower! The insects here are showing erruptive or irruptive behavious as well. 5.3 Biomass densities rather than total biomass The model predicts the total biomass for each grid cell. For reporting and for comparing with reference data, it is probably better to convert this to biomass densities. J Hoeks showed me a simple way to do this: # load grid properties, the list_output_paths() can be used to see all outputs by the model gridProps &lt;- read.csv(list_output_paths(mdata2)$grid_properties[1]) # calculate area of simulation, exclude marine grid cells AreaKm2 &lt;- sum(gridProps$GetCellArea[gridProps$IsMarine==0]) "],["exploring-spatial-inputs.html", "Chapter 6 Exploring spatial inputs 6.1 Climate data 6.2 Other spatial inputs", " Chapter 6 Exploring spatial inputs This page was last updated 2022-08-10 14:56:41 On this page I am exploring the spatial inputs to see if they make sense for Norway. 6.1 Climate data There are five climate data inputs: cat(names(sptl_inp[c(4,10,11,12,13)]), sep=&quot;\\n&quot;) % available_water_capacity % near-surface_temperature % precipitation % ground_frost_frequency % diurnal_temperature_range They are on a monthly resolution. Im not sure about what time period the default rasters represents, but these layers can easily be changes, or modified, to either simulate climate change or to model ecosystem structure under a different past climate to use as a reference point in say ecological condition assessments. Lets explore the seasonal variation in some of these datasets. Available water capacity temp &lt;- sptl_inp$available_water_capacity box &lt;- bb( xlim = c(-10,30), ylim = c(50,70)) tm_shape(temp, bbox = box)+ tm_raster() #seq(-30,30,10)) rm(temp) This looks a bit un-nuanced. Lets first see this pattern in a continental context. Note: theres only one band here (annual means I think). temp &lt;- sptl_inp$available_water_capacity box2 &lt;- bb( xlim = c(-30,80), ylim = c(10,70)) tm_shape(temp, bbox = box2)+ tm_raster() #seq(-30,30,10)) rm(temp) The major expected patterns are visible, but Norway non-the-less have values that are comparable to southern Greece. What does this environmental variable actually represent? Temperature temp &lt;- sptl_inp$`near-surface_temperature` #box &lt;- bb( xlim = c(-10,20), # ylim = c(55,65)) tm_shape(temp[[c(1,6)]], bbox = box)+ tm_raster(style = &quot;fixed&quot;, breaks = c(-30,-10,0,10, 30)) #seq(-30,30,10)) Minusgrader i Januar (øverst) og varmegrader i juni (nederst). Precipitation temp &lt;- sptl_inp$precipitation #box &lt;- bb( xlim = c(-10,20), # ylim = c(55,65)) tm_shape(temp[[c(1,3,6, 9)]], bbox = box)+ tm_raster(style = &quot;fixed&quot;, breaks = seq(0,600,100)) The W-E gradient is evident in the precipitation data. Ground frost frequency This is probably the number of ground frost days per month. temp &lt;- sptl_inp$ground_frost_frequency tm_shape(temp[[c(1,3,6, 9)]], bbox = box)+ tm_raster() Diurnal temperature range temp &lt;- sptl_inp$diurnal_temperature_range tm_shape(temp[[c(1,3,6, 9)]], bbox = box)+ tm_raster(style = &quot;fixed&quot;, breaks = seq(0,20,5)) This must be the difference between day and nighttime temperatures. There is a coast-inland gradient with oceanic climates being less variable on a diurnal scale. WorldClim I could get some more high resolution data from WorldClim for - temperature tmean or BIO1 - precipitation BIO12 (also pmean?) - mean diurnal range BIO2 Using 10 arcdegrees resolution (1/6 of a degree) and only the tile that covers the bulk of southern Norway Norbioclim&lt;-getData(&#39;worldclim&#39;,var=&#39;tmean&#39;,res=10) The above chunk failed unfortunately. See: https://github.com/rspatial/raster/issues/191 6.2 Other spatial inputs cat(names(sptl_inp[-c(4,10,11,12,13)]), sep=&quot;\\n&quot;) % realm_classification % land_mask % hanpp % Ecto_max % Endo_C_max % Endo_H_max % Endo_O_max % terrestrial_net_primary_productivity Realm classification and the land mask are basically the same. Theyre just a masks seperating terrestrial land from the marine environment. Realm classifications has three levels (sea, land, antarctica, whereas land_mask treats Antarctica as land. Only terrestrial ecosystems are supported in the R version of Madingley. The C++ version also include marine ecosystems. tmap_arrange( tm_shape(sptl_inp$realm_classification)+#, bbox = box)+ tm_raster(), #seq(-30,30,10)) tm_shape(sptl_inp$land_mask)+#, bbox = box)+ tm_raster()) HANPP Single band. tm_shape(sptl_inp$hanpp, bbox = box)+ tm_raster(style = &quot;fixed&quot;, breaks = c(-500,0,100,200,300,400,500)) The human land use is very limited in Norway according to this data. Its probably true. More detailed data could perhaps be found and used, such as AR5, but Im not going into that now. Max and min individual biomass These maps shpw the maximum individual size (mass) for the different functional groups. First I show the whole world, and then I zoom in on Norway. tmap_arrange( tm_shape(sptl_inp$Ecto_max)+#, bbox = box)+ tm_raster(), #seq(-30,30,10)) tm_shape(sptl_inp$Endo_C_max)+#, bbox = box)+ tm_raster(), tm_shape(sptl_inp$Endo_H_max)+#, bbox = box)+ tm_raster(), #seq(-30,30,10)) tm_shape(sptl_inp$Endo_O_max)+#, bbox = box)+ tm_raster()) Ectothermic species are allowed (by the model) to get much bigger around the tropics (top). These are probably reptiles. Endothermic Carnivores are allowed to get the biggest in the north. Pure Herbivores are allowed to get biggest in Africa (savannahs). The units seem to be in minutes for some reason. The max allowed size for herbivores is maxValue(sptl_inp$Endo_H_max)/1000000 % [1] 3.940034 tons. Omnivores are allowed to get biggest further north than the pure herbivores. They can only grow to 190 kg. maxValue(sptl_inp$Endo_O_max)/1000 % [1] 190.7923 Then the same maps, but looking just at Norway tmap_arrange( tm_shape(sptl_inp$Ecto_max, bbox = box)+ tm_raster(style = &quot;fixed&quot;, breaks = seq(0,10000,1000)), tm_shape(sptl_inp$Endo_C_max, bbox = box)+ tm_raster(style = &quot;fixed&quot;, breaks = seq(0,50000,10000)), tm_shape(sptl_inp$Endo_H_max, bbox = box)+ tm_raster(style = &quot;fixed&quot;, breaks = seq(0,700000,100000)), tm_shape(sptl_inp$Endo_O_max, bbox = box)+ tm_raster()) In Norway, ectotherms can get to about 6 kg. The biggest species are probably snakes. Carnivores can grow to 40 kg. About right for a wolf. Bears are omnivores. They can grow to 200 kg in Norway. Pure herbivores are allowed to grow to about 500 kg. The data make sense, also for Norway. One could discuss I its correct to treat large carnivores as functionally extinct. Net Primary Productivity tmap_arrange( tm_shape(sptl_inp$terrestrial_net_primary_productivity[[1]], bbox = box)+ tm_raster() , tm_shape(sptl_inp$terrestrial_net_primary_productivity[[7]], bbox = box)+ tm_raster() ) NPP for January to the left and july to the right. NPP is zero in winter, which is good. "],["trophic-pyramids.html", "Chapter 7 Trophic pyramids 7.1 Fixing a bug inthe R package", " Chapter 7 Trophic pyramids Exploring the biomass time series produced from running a 100 year spinup for 16 grid cells in central Norway. This page was last updated 2022-08-10 14:57:28 plot_trophicpyramid(mdata2) % loading inputs from: temp/madingley_outs_09_08_22_13_49_03/ These are monthly means (se below). The plant:animal ratio is (10^8.9+10^9.41+10^9.76)/10^11.16 % [1] 0.06308892 or about 6%. Plant biomass converted to gigatons: 10^11.16/10^12 % [1] 0.144544  or tons (plants &lt;- 10^11.16/10^3) % [1] 144543977 Plant biomass presented as biomass densities (tons/km): gridProps &lt;- read.csv(list_output_paths(mdata2)$grid_properties[1]) # calculate area of simulation, exclude marine grid cells AreaKm2 &lt;- sum(gridProps$GetCellArea[gridProps$IsMarine==0]) plants/AreaKm2 % [1] 1498.688 These values can perhaps be validated using landskog etc? 7.1 Fixing a bug inthe R package The autotrophic or plant biomass was initially 10^15.17 kg, or Written in a more familiar different way, that is the same as (10^15.17)/10^12 # divided by 1 000 to go from kg to tons, and 1 000 000 000 to get Gt % [1] 1479.108 Gigatons (Gt). But after the authors fixed the model following our input, this estimate was reduced to 10^11.16 kg, or 0.14 gigatons. Where did/does this number come from? I used to be able to recreate the number (that is, before they updated the package) by summing the biomass for the whole last year of the simulation: biom &lt;- sum(mdata2$time_line_stocks$TotalStockBiomass[ mdata2$time_line_stocks$Year==max(mdata2$time_line_stocks$Year) ]) #Converted to base10 scientific paste0(&quot;10^&quot;, round( log10(biom), 2)) # result = &quot;10^15.17&quot; In the updated version, the biomass estimate used in the trophic pyramid is the annual mean instead: biom &lt;- mean(mdata2$time_line_stocks$TotalStockBiomass[ mdata2$time_line_stocks$Year==max(mdata2$time_line_stocks$Year) ]) #Converted to base10 scientific paste0(&quot;10^&quot;, round( log10(biom), 2)) # result = &quot;10^15.17&quot; According to Wikipedia the total biomass of the world is about 1 000 billion tons (assuming 50% C). This is the same as 1 000 gigatons Gt. A different source says 500 Gt for the total world biomass. Our estimate for the plant biomass of south Norway was therefore about 50% bigger than the total biomass of the planet! Hoeks et al 2020 Glo. Eco. Bio. got comparable values to us when using the same R package and same study extent (4x4 degrees). If our numbers are wrong in this example, then their numbers must be wrong as well. Harfoot et al 2014 got much lower values using the C# version of Madingley. For a single grid cell (aseasonal ecosystem in tropical Uganda) they got 24 611 tons of plant biomass. If we multiply that with 16 to become comparable to our study extent, and convert it to Gt, we get % [1] 0.000393776 This is much, much lower than our first estimate. J. Hoeks ponited out that Harfoot had reported biomass densities, (kg/km), and shoed how that goes a long way to explaining the differences shoed here This is roughly the script that produces the trophic pyramid figure above (plot_trophicpyramid()) years &lt;- 0 tl &lt;- mdata2$time_line_stocks tl &lt;- aggregate(tl, by = list(tl$Year), FUN = mean) # FUN used to be sum before they changed it tl &lt;- tl[(nrow(tl) - length(years) + 1):nrow(tl), ] tl$TotalStockBiomass/10^12 I suspect that the unit in mdata2$time_line_stocks is grams, and not kg. ( this was later confirmed by Hoeks.) As we will see below, its grams for the heterotrophic cohorts. But even so, the numbers are way off. How do our monthly estimates compare to Harfoot et al 2014. This is our maximum monthly estimate in the last year of the spin up, converted to Gt: (temp &lt;- max( mdata2$time_line_stocks$TotalStockBiomass[ mdata2$time_line_stocks$Year==max(mdata2$time_line_stocks$Year) ])/10^12) % [1] 0.238697 Our first estimate (before the package update) was 214, which was way to high. Is wed then assumed the the unit shouldve been g and not kg, wed still get 0.2 Gt (compare with 0.0004 in Harfoot et l 2014). There must have been more to this than the g and kg mistake and the fact that the biomass is an accumulated monthly sum. turns out it was the fact that the unit was desnty not toal biomass But why does the R function use an accumulated monthly sum? I can not think of a good reason. it was a mistake by the developers It makes more sense to me to just get the standing biomass for a given month, perhaps the maximum monthly value. In our area in Norway the plant biomass peaks in September. What about the herbivore data. How are those biomass estimates that are reported in the trophic pyramid above calculated? In the trophic pyramid we see a value of about 0.006 Gt: 10^9.76/10^12 % [1] 0.005754399 Here is the heterotrophic biomass over the last year of our simulation dat &lt;- mdata2$time_line_cohorts #subset to only the last year #the last year only has 11 month for some reason: #table(dat$Year) #looking at the plot_pyramid() function, they still used the last 12 months dat &lt;- dat[dat$Month &gt; max(dat$Month)-12,] # melt data datm &lt;- data.table::melt(data.table::setDT(dat), id.vars = c(&quot;Year&quot;, &quot;Month&quot;), variable.name = &quot;FG&quot;, value.name = &quot;biomass&quot;) # assuming the unit is g, so i divide by 10^6 to give tons datm$tons &lt;- datm$biomass/10^6 ggplot(dat = datm, aes(x = Month, y = tons, colour = FG, linetype=FG))+ geom_line(size=1.5)+ theme_bw(base_size = 12)+ ylab(&quot;Biomass (tons)&quot;) Now, let me try to recreate the number in the trophic pyramid. Combining the herbivores datherb &lt;- datm[datm$FG == &quot;Biomass_FG_0&quot; | datm$FG == &quot;Biomass_FG_3&quot; | datm$FG == &quot;Biomass_FG_6&quot; ,] Summed biomass across all months in the raw/unknown units. I checked, and the unit is kg, therefore to get Gt: sum(datherb$biomass)/10^12 % [1] 0.0687903 Again, checking the plot_pyramid() function, they then too this value and divided på 12 to get mean monthly biomass log10(sum(datherb$biomass)/12) % [1] 9.758346 The aniaml biomass is therefore comparable to the plants - both show monthly means. "]]
