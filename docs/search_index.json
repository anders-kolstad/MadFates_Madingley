[["index.html", "Running the Madingley Model with Norwegian data Chapter 1 Introduction 1.1 Some useful links 1.2 Terms and definitions", " Running the Madingley Model with Norwegian data Anders L. Kolstad 2021-12-22 Chapter 1 Introduction This work is part of the MadFates project, run by Joachim TÃ¶pper. The goal is to learn bit about the Madingley model and its potential for modeling biomass distributions across trophic levels in Norwegian boreal ecosystem. Perhaps limited to forests. This page is hosted in GitHub and produced using bookdown. 1.1 Some useful links Paper on the R package Paper on the model itself 1.1.1 Examples of use Removing carnivores Land-use change 1.2 Terms and definitions Cohorts - Organisms with similar functional roles are grouped into cohorts which are treated as sinle entities in the model to reduce computational requirements. Stock - autotrofic biomass is treated as a single entity (stock). Model initialisation - After loading input data the model is run once without a year parameter. Not sure why exactly, or what the output is. Spin-up phase - The model needs to run for 100-1000 simulated years without any user modifications to allow the ecosystem componets to reach a stable state. HANPP - human appropriation of net primary productivity. The variable spans from zero (or actually with some points &lt;0 which I dont understand how to interpret) and 1200. Im not sure what the units are, but probably they are the same as for the autrophic biomass. In case study 2 they simply set the value to a uniform value between zero and one in this way: sptl_inp$hanpp[] = fractional_veg_production[i] and set apply_hanpp =1 which reduces NPP in fractions provided in the hanpp spatial input raster. The example HANPP input data is from year 2005. library(MadingleyR) library(raster) sptl_inp = madingley_inputs(&quot;spatial inputs&quot;) ## Warning: package &#39;rgdal&#39; was built under R version 4.1.2 ## Reading default input rasters from: C:/Users/anders.kolstad/Documents/R/R-4.1.1/library/MadingleyR/spatial_input_rasters............. raster::plot(sptl_inp$hanpp, main = &quot;HANPP anno 2005&quot;) "],["installation.html", "Chapter 2 Installation", " Chapter 2 Installation Madingley is written in C++, but an R version is also available. Although a little bit less flexible perhaps, it should be more than sufficient four this project. And much more familiar. Madinley requires libm.so.6: version GLIBC_2.29. I thnk this is required for running the C++ executables. Perhaps its only requires on linux machines, i dont know. But in any case, the Rstudio server on NINA (Ubuntu 18.04) har libc6 v. 2.27 and IT dont want to upgrade due to dependencies with other software. Therefore Im forces to work locally on my Windows laptop. library(devtools) install_github(&#39;MadingleyR/MadingleyR&#39;, subdir=&#39;Package&#39;, build_vignettes = F, force = T) I still could not get the vignettes to build. It crashes between line 133-144 in Madingley.Rmd which is where madingley_run() is first used. MadingleyR::madingley_version() Versions are up-to-date. When trying to install this on the server I get the following error: ./madingley: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29 not found (required by ./madingley) running command cd /home/NINA.NO/anders.kolstad/R/x86_64-pc-linux-gnu-library/4.0/MadingleyR/lin_exec/ &amp;&amp; ./madingley version had status 1Error in x[[jj]][iseq] &lt;- vjj : replacement has length zero The vignette could not be build. vignette(package =&quot;MadingleyR&quot;) ## no vignettes found It can, however, be viewed here. "],["step-1---3.html", "Chapter 3 Step 1 - 3 3.1 Step 1 - Load data 3.2 Step 2 - Modify input parameters 3.3 Step 3 - Initialisation", " Chapter 3 Step 1 - 3 3.1 Step 1 - Load data Defining the study area in degree long-lat. spatial_window = c(31, 35, -5, -1) Plot the spatial window to check selection plot_spatialwindow(spatial_window) This corresponds to somewhere in the Serengetti I think. This is the default data to initialise the model. The spatial inputs is a relatively big list of raster files, but the others are small data frames. sptl_inp = madingley_inputs(&quot;spatial inputs&quot;) % Warning: package &#39;rgdal&#39; was built under R version 4.1.2 chrt_def = madingley_inputs(&quot;cohort definition&quot;) stck_def = madingley_inputs(&quot;stock definition&quot;) mdl_prms = madingley_inputs(&quot;model parameters&quot;) # useful later for running the model The Spatial Input is the environmental variables in the form of several raster layers. I think the 12 slots are months of a year. str(sptl_inp,2) % List of 13 % $ realm_classification :Formal class &#39;RasterLayer&#39; [package &quot;raster&quot;] with 12 slots % $ land_mask :Formal class &#39;RasterLayer&#39; [package &quot;raster&quot;] with 12 slots % $ hanpp :Formal class &#39;RasterLayer&#39; [package &quot;raster&quot;] with 12 slots % $ available_water_capacity :Formal class &#39;RasterLayer&#39; [package &quot;raster&quot;] with 12 slots % $ Ecto_max :Formal class &#39;RasterLayer&#39; [package &quot;raster&quot;] with 12 slots % $ Endo_C_max :Formal class &#39;RasterLayer&#39; [package &quot;raster&quot;] with 12 slots % $ Endo_H_max :Formal class &#39;RasterLayer&#39; [package &quot;raster&quot;] with 12 slots % $ Endo_O_max :Formal class &#39;RasterLayer&#39; [package &quot;raster&quot;] with 12 slots % $ terrestrial_net_primary_productivity:Formal class &#39;RasterBrick&#39; [package &quot;raster&quot;] with 12 slots % $ near-surface_temperature :Formal class &#39;RasterBrick&#39; [package &quot;raster&quot;] with 12 slots % $ precipitation :Formal class &#39;RasterBrick&#39; [package &quot;raster&quot;] with 12 slots % $ ground_frost_frequency :Formal class &#39;RasterBrick&#39; [package &quot;raster&quot;] with 12 slots % $ diurnal_temperature_range :Formal class &#39;RasterBrick&#39; [package &quot;raster&quot;] with 12 slots temp &lt;- sptl_inp$precipitation class(temp) % [1] &quot;RasterBrick&quot; % attr(,&quot;package&quot;) % [1] &quot;raster&quot; temp % class : RasterBrick % dimensions : 180, 360, 64800, 12 (nrow, ncol, ncell, nlayers) % resolution : 1, 1 (x, y) % extent : -180, 180, -90, 90 (xmin, xmax, ymin, ymax) % crs : NA % source : memory % names : precipitation_01, precipitation_02, precipitation_03, precipitation_04, precipitation_05, precipitation_06, precipitation_07, precipitation_08, precipitation_09, precipitation_10, precipitation_11, precipitation_12 % min values : 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 % max values : 660.1902, 580.5394, 528.9492, 519.1000, 571.3623, 867.7639, 897.7082, 815.6902, 585.4082, 610.5918, 569.8918, 637.4180 The resolution is 1 degree, which is approx. 111 km at the equator. Plotting precipitation for months jan-april plot(temp[[1:4]]) rm(temp) The data has global coverage. Im assuming this is WorldClim data, but not sure. The cohort definitions look like this, and can be modified by the user. DT::datatable(chrt_def, extensions = &quot;FixedColumns&quot;, options = list( scrollX = TRUE, scrollY=T, pageLength = 10)) The stock definitions are in the default input data limited to evergreen and deciduous plants. DT::datatable(stck_def, extensions = &quot;FixedColumns&quot;, options = list( scrollX = TRUE, scrollY=T, pageLength = 10)) The model parameters are perhaps a bit more cryptic: DT::datatable(mdl_prms, extensions = &quot;FixedColumns&quot;, options = list( scrollX = TRUE, scrollY=T, pageLength = 20)) They are divided into 12 categories: cat(unique(mdl_prms$category), sep=&quot;\\n&quot;) % Activity % Diffusive Dispersal % Responsive Dispersal % Eating Carnivory % Eating Omnivory % Eating Herbivory % Metabolism Ectotherm % Metabolism Endotherm % Metabolism Heterotroph % Mortality % Reproduction % Terrestrial Carbon 3.2 Step 2 - Modify input parameters We will not do any modifications at this stage 3.3 Step 3 - Initialisation Model initialisation is done using madingley_init() by supplying the input data above (excl. model parameters). Also one can set the maximum number of cohors allowed per cell. The default is 500 and max is 1000. a higher number increases computation time due to more cohort interactions. mdata &lt;- madingley_init(spatial_window = spatial_window, cohort_def = chrt_def, stock_def = stck_def, spatial_inputs = sptl_inp, max_cohort = 100) % Processing: realm_classification, land_mask, hanpp, available_water_capacity % Processing: Ecto_max, Endo_C_max, Endo_H_max, Endo_O_max % Processing: terrestrial_net_primary_productivity_1-12 % Processing: near-surface_temperature_1-12 % Processing: precipitation_1-12 % Processing: ground_frost_frequency_1-12 % Processing: diurnal_temperature_range_1-12 % Runtime is just a few seconds. str(mdata, 1) % List of 6 % $ cohorts :&#39;data.frame&#39;: 1584 obs. of 16 variables: % $ stocks :&#39;data.frame&#39;: 32 obs. of 3 variables: % $ cohort_def :&#39;data.frame&#39;: 9 obs. of 14 variables: % $ stock_def :&#39;data.frame&#39;: 2 obs. of 10 variables: % $ spatial_window: num [1:4] 31 35 -5 -1 % $ grid_size : num 1 The output contain the cohors and stocks for each pixel. save(mdata, chrt_def, mdl_prms, sptl_inp, stck_def, file = &quot;data/initOut_demo.RData&quot;) "],["step-4---spin-up-and-demonstrating-plotting-functions.html", "Chapter 4 Step 4 - Spin-up and demonstrating plotting functions", " Chapter 4 Step 4 - Spin-up and demonstrating plotting functions library(MadingleyR) knitr::opts_chunk$set(comment=&#39;%&#39;) load(&quot;data/initOut_demo.RData&quot;) The spin-up usualy requires a 100-1000 year simulation for the ecosystem parameters to stabilise. Here we will use just 2 years for demonstration. The function takes as input the output data fram madingley_init() as well as the standard model input variables /(which can be modified). The below code is the same as in the vignette example except I had to define my own output folder for some reason. mdata2 &lt;- madingley_run( out_dir = &quot;temp&quot;, madingley_data = mdata, years = 2, cohort_def = chrt_def, stock_def = stck_def, spatial_inputs = sptl_inp, model_parameters = mdl_prms, max_cohort = 100) % Processing: realm_classification, land_mask, hanpp, available_water_capacity % Processing: Ecto_max, Endo_C_max, Endo_H_max, Endo_O_max % Processing: terrestrial_net_primary_productivity_1-12 % Processing: near-surface_temperature_1-12 % Processing: precipitation_1-12 % Processing: ground_frost_frequency_1-12 % Processing: diurnal_temperature_range_1-12 # Runtime approx 30 sec # View the contents of mdata2 str(mdata2,1) % List of 10 % $ cohorts :&#39;data.frame&#39;: 1581 obs. of 16 variables: % $ stocks :&#39;data.frame&#39;: 32 obs. of 3 variables: % $ cohort_def :&#39;data.frame&#39;: 9 obs. of 14 variables: % $ stock_def :&#39;data.frame&#39;: 2 obs. of 10 variables: % $ time_line_cohorts:&#39;data.frame&#39;: 23 obs. of 11 variables: % $ time_line_stocks :&#39;data.frame&#39;: 23 obs. of 3 variables: % $ out_dir_name : chr &quot;/madingley_outs_16_12_21_15_38_33/&quot; % $ spatial_window : num [1:4] 31 35 -5 -1 % $ out_path : chr &quot;temp&quot; % $ grid_size : num 1 This output is similar to the previous outpur from madingley_init() only it also contains stocks and cohorts as timeslines. Lets view these timelines. plot_timelines(mdata2) % Warning in xtfrm.data.frame(x): cannot xtfrm data frames % Warning in xtfrm.data.frame(x): cannot xtfrm data frames Plot body mass density plot_densities(mdata2) % loading inputs from: temp/madingley_outs_16_12_21_15_38_33/ Plot trophic pyramid plot_trophicpyramid(mdata2) % loading inputs from: temp/madingley_outs_16_12_21_15_38_33/ Create log10-binned food-web plot plot_foodweb(mdata2, max_flows = 5) % loading inputs from: temp/madingley_outs_16_12_21_15_38_33/ Plot the spatial biomass plot_spatialbiomass(mdata2, functional_filter = TRUE) % loading inputs from: temp/madingley_outs_16_12_21_15_38_33/ save(mdata2, chrt_def, mdl_prms, sptl_inp, stck_def, file = &quot;data/spinupOut_demo.RData&quot;) "],["norway---default-settings.html", "Chapter 5 Norway - default settings 5.1 16 grid cells 5.2 Single grid cell", " Chapter 5 Norway - default settings This is just a first look at what the model predicts for Norway with default settings. This page was last updated 2021-12-22 09:59:42 First we try with 4 x 4 grid cells (16 grid cells, with dispersion) in south-central Norway. Then we try with just one grid cell, but a longer temporal scope. 5.1 16 grid cells Lets start with a too big bonding box for illustration. spatial_window = c(5, 12, 58, 65) plot_spatialwindow(spatial_window) The default resolution is 1 degree, giving (7 x 7 =) 49 cells in this case, which is too much for testing purpuses due to compuatation time. The resolution is defined by the spatial input rasters, but 1 degree resolution is the maximum. Finer resolution is possible, ut not courser. I will therefore focus on just Central Norway. Plotting on top of mean annual temperature. mat = mean(sptl_inp[[10]]) spatial_window = c(6, 10, 59, 63) plot_spatialwindow(spatial_window, ylim=c(55,65), xlim=c(-10,20), input_raster = mat) Notice how at high latitudes, one degree north-south is much longer in distance compared to 1 degree east-west. mdata &lt;- madingley_init(spatial_window = spatial_window, cohort_def = chrt_def, stock_def = stck_def, spatial_inputs = sptl_inp, max_cohort = 100) % Processing: realm_classification, land_mask, hanpp, available_water_capacity % Processing: Ecto_max, Endo_C_max, Endo_H_max, Endo_O_max % Processing: terrestrial_net_primary_productivity_1-12 % Processing: near-surface_temperature_1-12 % Processing: precipitation_1-12 % Processing: ground_frost_frequency_1-12 % Processing: diurnal_temperature_range_1-12 % mdata2 &lt;- madingley_run( out_dir = &quot;temp&quot;, madingley_data = mdata, years = 10, cohort_def = chrt_def, stock_def = stck_def, spatial_inputs = sptl_inp, model_parameters = mdl_prms, max_cohort = 100, silenced = TRUE) % Warning in system(run_exec, intern = T): running command &#39;&quot;C:/Users/ % anders.kolstad/Documents/R/R-4.1.1/library/MadingleyR/win_exec/madingley.bat&quot;&#39; % had status 5 # Runtime approx 15 sec Save the output. save(mdata2, chrt_def, mdl_prms, sptl_inp, stck_def, file = &quot;data/NorwayDefaultSpinup.RData&quot;) plot_timelines(mdata2) % Warning in xtfrm.data.frame(x): cannot xtfrm data frames % Warning in xtfrm.data.frame(x): cannot xtfrm data frames The 10 year spin up was probably way too short, and we can see much variation or instability, but none the less, the seasonal patterns is visible for both autotrophs and heterotrophs, but it it much to little. There should be almost no ectotherm biomass in winter. Bird migration I dont think is accounted for either. I predict this will be the biggest challenge - getting the Madingley model to capture the seasonal phenological stages. Exploring the cohorts in mdata2. Looking only at herbivorous endotherms, we can look at the relationship between individual size and abundance temp &lt;- mdata2$cohorts temp &lt;- temp[temp$FunctionalGroupIndex==0,] ggplot(data = temp)+ geom_point(aes(x = log(IndividualBodyMass), y = log(CohortAbundance) ), alpha=.1, size=8, colour=&quot;blue&quot;, pch=16)+ theme_bw(base_size = 20) # plotting all grid cells and all cohorts or FG 0 No relationship. Lets look at biomass differences between functional groups. First,let make more intuitive names for the functional groups. link &lt;- data.frame( FG = seq(0,8,1), FGname = c(&quot;Endo. herb.&quot;, &quot;Endo. carn.&quot;, &quot;Endo. omni.&quot;, &quot;Ecto. sem. herb.&quot;, # semelparous (insect etc) &quot;Ecto. sem. carn.&quot;, &quot;Ecto. sem. omni.&quot;, &quot;Ecto. itero. herb.&quot;, # iteroparous (reptiles etc) &quot;Ecto. itero. carn.&quot;, &quot;Ecto. itero. omni.&quot; ) ) temp &lt;- mdata2$cohorts temp2 &lt;- aggregate(data = temp, IndividualBodyMass~factor(FunctionalGroupIndex), FUN = mean) temp2$CohortAbundance &lt;- aggregate(data = temp, CohortAbundance~factor(FunctionalGroupIndex), FUN = mean)[,2] names(temp2)[1]&lt;- &quot;FG&quot; temp2$FG &lt;- as.character(temp2$FG) temp2$FGname &lt;- link$FGname[match(temp2$FG, link$FG)] ggplot(temp2, aes(x = CohortAbundance, y = IndividualBodyMass, label = FGname))+ geom_text(size = 5, position = position_dodge2v(2000))+ theme_bw(base_size = 20)+ scale_y_continuous(expand = expansion(mult=c(.2,.2)))+ scale_x_continuous(expand = expansion(mult=c(.2,.2))) Obs, beware of strong dodging in this figure in place to be able to read all labels. Endothermic carnivores and herbivores are the biggest animals. Omnivorous ectotheric and semelparous species (insects) are small but numerous. The total biomass for a trophic group must somehow be the product of these two axes (se biomass pyramid below). Note: The individual body mass is here the mean of all cohorts. If reproduction is low, mean individual body mass increases because of a higher proportion of older individuals (higher biomass in the cohorst containing older individuals). plot_densities(mdata2) % loading inputs from: temp/madingley_outs_21_12_21_10_29_15/ This figure is showing the distribution of total cohort biomass for each FG. For Herbivores (top right), the distribution is left-skewed, telling us that there is a threshold for how big a cohort cen get. This can be due to reproductive limitations og perhaps intraspecific competition leading to starvation or dispersal. Ectotherm biomass has a clear optimum, but no limitation in size, probably due to high plasticity in reproductive rates. plot_trophicpyramid(mdata2) % loading inputs from: temp/madingley_outs_21_12_21_10_29_15/ Se the pge on trophic pyramids for a more detailed exploration of this figure and what it contains. Create log10-binned food-web plot plot_foodweb(mdata2, max_flows = 5) % loading inputs from: temp/madingley_outs_21_12_21_10_29_15/ The interactions are dominated by carnivorous insects eating omnivorous insects. Omnivorous insects must have a high turn over, because their combined biomass is low at any one time. Plot the spatial biomass plot_spatialbiomass(mdata2, functional_filter = TRUE) % loading inputs from: temp/madingley_outs_21_12_21_10_29_15/ The next step I think is to go though the model parameters in mdl_prms and see if the settings make sense for boreal, mainly forested or alpine, ecosystem. We can also change values in the spatial input sptl_inp, for example setting the max biomass for ectotherms (we dont have large reptiles here). 5.2 Single grid cell Using a single grid cell we can run the simulation for longer, and see how that affects things. spatial_window = c(9, 10, 60, 61) plot_spatialwindow(spatial_window, ylim=c(55,65), xlim=c(-10,20), input_raster = mat) mdata &lt;- madingley_init(spatial_window = spatial_window, cohort_def = chrt_def, stock_def = stck_def, spatial_inputs = sptl_inp, max_cohort = 100) % Processing: realm_classification, land_mask, hanpp, available_water_capacity % Processing: Ecto_max, Endo_C_max, Endo_H_max, Endo_O_max % Processing: terrestrial_net_primary_productivity_1-12 % Processing: near-surface_temperature_1-12 % Processing: precipitation_1-12 % Processing: ground_frost_frequency_1-12 % Processing: diurnal_temperature_range_1-12 % Using 100 years instead of 10 mdata2 &lt;- madingley_run( out_dir = &quot;temp&quot;, madingley_data = mdata, years = 100, cohort_def = chrt_def, stock_def = stck_def, spatial_inputs = sptl_inp, model_parameters = mdl_prms, max_cohort = 100, silenced = TRUE) % Warning in system(run_exec, intern = T): running command &#39;&quot;C:/Users/ % anders.kolstad/Documents/R/R-4.1.1/library/MadingleyR/win_exec/madingley.bat&quot;&#39; % had status 5 # Runtime approx 45 sec plot_timelines(mdata2) % Warning in xtfrm.data.frame(x): cannot xtfrm data frames % Warning in xtfrm.data.frame(x): cannot xtfrm data frames The components seem to stabilise relatively fast, and after ~20 years there are no long-term trends (results vary between each time this page is rendered). The relative biomass distribution between functional groups is different. This is probably a characteristic of this grid cell, and have less to do with the number of years simulated by the model. "],["exploring-spatial-inputs.html", "Chapter 6 Exploring spatial inputs 6.1 Climate data 6.2 Other spatial inputs", " Chapter 6 Exploring spatial inputs This page was last updated 2021-12-22 10:01:46 On this page I am exploring the spatial inputs to see if they make sense fir Norway. 6.1 Climate data There are five climate data inputs: cat(names(sptl_inp[c(4,10,11,12,13)]), sep=&quot;\\n&quot;) % available_water_capacity % near-surface_temperature % precipitation % ground_frost_frequency % diurnal_temperature_range They are on a monthly resolution. Im not sure about what time period the default rasters represents, but these layers can easily be changes, or modified, to either simulate climate change or to model ecosystem structure under a different past climate to use as a reference point in say ecological condition assessments. Lets explore the seasonal variation in some of these datasets. Available water capacity temp &lt;- sptl_inp$available_water_capacity box &lt;- bb( xlim = c(-10,30), ylim = c(50,70)) tm_shape(temp, bbox = box)+ tm_raster() #seq(-30,30,10)) rm(temp) This looks a bit un-nuanced. Kets first see this pattern in a continental context. Note: theres only one band here (annual means). temp &lt;- sptl_inp$available_water_capacity box2 &lt;- bb( xlim = c(-30,80), ylim = c(10,70)) tm_shape(temp, bbox = box2)+ tm_raster() #seq(-30,30,10)) rm(temp) The majo, expected patterns are visible, but Norway non-the-less have values that are comparateble to parts of Sahara. WHat does this environmental varieble actually represent? Temperature temp &lt;- sptl_inp$`near-surface_temperature` #box &lt;- bb( xlim = c(-10,20), # ylim = c(55,65)) tm_shape(temp[[c(1,6)]], bbox = box)+ tm_raster(style = &quot;fixed&quot;, breaks = c(-30,-10,0,10, 30)) #seq(-30,30,10)) rm(temp) Minusgrader i Januar (Ã¸verst) og varmegrader i juni (nederst). Precipitation temp &lt;- sptl_inp$precipitation #box &lt;- bb( xlim = c(-10,20), # ylim = c(55,65)) tm_shape(temp[[c(1,3,6, 9)]], bbox = box)+ tm_raster(style = &quot;fixed&quot;, breaks = seq(0,600,100)) rm(temp) The W-E gradiant is evident in the precipitatin data. Ground frost frequency This is probably the number of ground frost days per month. temp &lt;- sptl_inp$ground_frost_frequency tm_shape(temp[[c(1,3,6, 9)]], bbox = box)+ tm_raster() rm(temp) Diurnal temperature range temp &lt;- sptl_inp$diurnal_temperature_range tm_shape(temp[[c(1,3,6, 9)]], bbox = box)+ tm_raster(style = &quot;fixed&quot;, breaks = seq(0,20,5)) rm(temp) This must be the difference between day and nighttime temperatures. There is a coast-inlanbd gradient with oceanic climates being lass variable on a diurnal scale. WorldClim I could get some more high resolution data from WorldClim for - temperature tmean or BIO1 - precipitation BIO12 (also pmean?) - mean diurnal range BIO2 Using 10 arcdegrees resolution (1/6 of a degree) and only the tile that covers the bulk of southern Norway Norbioclim&lt;-getData(&#39;worldclim&#39;,var=&#39;tmean&#39;,res=10) The above chunk failed unfortunately. See: https://github.com/rspatial/raster/issues/191 6.2 Other spatial inputs cat(names(sptl_inp[-c(4,10,11,12,13)]), sep=&quot;\\n&quot;) % realm_classification % land_mask % hanpp % Ecto_max % Endo_C_max % Endo_H_max % Endo_O_max % terrestrial_net_primary_productivity Realm classifivation and the land mask are basically the same. Theyre just a masks seperating terrestrial land from the marine environment. Realm classifications has three levels (sea, land, antarctica, whereas land_mask treats Antarctica as land. Only terrestrial ecosystems are supported in the R version of Madingley. The C++ version also include marine ecosystems. tmap_arrange( tm_shape(sptl_inp$realm_classification)+#, bbox = box)+ tm_raster(), #seq(-30,30,10)) tm_shape(sptl_inp$land_mask)+#, bbox = box)+ tm_raster()) HANPP Single band. tm_shape(sptl_inp$hanpp, bbox = box)+ tm_raster(style = &quot;fixed&quot;, breaks = c(-500,0,100,200,300,400,500)) The human land use is very limited in Norway according to this data. Its probably true. More detailed data could perhaps be found and used, such as AR5, but Im not going into that now. Max and min individual biomass tmap_arrange( tm_shape(sptl_inp$Ecto_max)+#, bbox = box)+ tm_raster(), #seq(-30,30,10)) tm_shape(sptl_inp$Endo_C_max)+#, bbox = box)+ tm_raster(), tm_shape(sptl_inp$Endo_H_max)+#, bbox = box)+ tm_raster(), #seq(-30,30,10)) tm_shape(sptl_inp$Endo_O_max)+#, bbox = box)+ tm_raster()) Ectothermic species are allowed (by the model) to get much bigger around the tropics (top). These are probably reptiles. Endothermic Carnivores are allowed to get the biggest in the north. Pure Herbivores are allowed to get biggest in Africa (savannahs). The units seem to be in minutes for some reason. The max allowed size for herbivores is maxValue(sptl_inp$Endo_H_max)/1000000 % [1] 3.940034 tons. Omnivores are allowed to get biggest further north than the pure herbivores. They can only grow to 190 kg. maxValue(sptl_inp$Endo_O_max)/1000 % [1] 190.7923 tmap_arrange( tm_shape(sptl_inp$Ecto_max, bbox = box)+ tm_raster(style = &quot;fixed&quot;, breaks = seq(0,10000,1000)), tm_shape(sptl_inp$Endo_C_max, bbox = box)+ tm_raster(style = &quot;fixed&quot;, breaks = seq(0,50000,10000)), tm_shape(sptl_inp$Endo_H_max, bbox = box)+ tm_raster(style = &quot;fixed&quot;, breaks = seq(0,700000,100000)), tm_shape(sptl_inp$Endo_O_max, bbox = box)+ tm_raster()) In Norway, ectotherms can get to about 6 kg. The biggest species are probably snakes. Carnivores can grow to 40 kg. About right for a wolf. Bears are omnivores. They can grow to 200 kg in Norway. Pure herbivores are allowed to grow to about 500 kg. The data make sense, also for Norway. NPP tmap_arrange( tm_shape(sptl_inp$terrestrial_net_primary_productivity[[1]], bbox = box)+ tm_raster() , tm_shape(sptl_inp$terrestrial_net_primary_productivity[[7]], bbox = box)+ tm_raster() ) NPP for January to the left and july to the right. NPP is zero in winter, which is good. "],["trophic-pyramids.html", "Chapter 7 Trophic pyramids", " Chapter 7 Trophic pyramids Exploring the biomass time series produced from running a 10 year spinup for 16 grid cells in central Norway. This page was last updated 2021-12-22 10:03:02 plot_trophicpyramid(mdata2) % loading inputs from: temp/madingley_outs_22_12_21_08_31_24/ Hmm, omnivores have a big biomass but only feed on herbivores, not plants. Autotrophic biomass is one quadrillion, or 100 trillion, og 10 000 billion kg. Thats 100 billion tons. These numbers are way to high. According to Wikipedia, 100 billion tons C is about 1/5th of the world biomass. Perhaps the unit in this figure should be g and not kg. The spatial inputs are given in grams, so it would make sense if these were also in grams. But even then the number is too big, even after converting biomass to C. Hoeks et al 2020 Glo. Eco. Bio. got comparable values to us when using the same R package and same study extent (4x4 degrees). Harfoot et al 2014 got much lower values. For a single grid cell (aseasonal ecosystem in tropical Uganda) they got 24 611 tons og plant biomass. If we multiply that with 16 to become comparable to our study extent, we get 3.9377610^{5} tons, which is 2.662252510^{-7} times smaller than what we got. However, how do our monthly estimates compare to Harfoot et al 2014. # our max monthly estimate in the last year of the spin up, converted to tons: (temp &lt;- max( mdata2$time_line_stocks$TotalStockBiomass[ mdata2$time_line_stocks$Year==max(mdata2$time_line_stocks$Year) ])/1000) % [1] 2.14235e+11 #harfoots estimate harfoot &lt;- 24611*16 temp/harfoot % [1] 544053 Our values are about halv a million times bigger. If the values are actually in gs and not kg: temp &lt;- temp/1000 temp/harfoot % [1] 544.053 were still far off. The autrophic biomass in this figure is summed, accumulated for the whole of the last year. This is what the code looks like, (slightly modified) in plot_trophicpyramid() years &lt;- 0 tl &lt;- mdata2$time_line_stocks tl &lt;- aggregate(tl, by = list(tl$Year), FUN = sum) tl &lt;- tl[(nrow(tl) - length(years) + 1):nrow(tl), ] (biom &lt;- mean(tl$TotalStockBiomass)) Let me recreate the number in the figure. Rewrite autrophic biomass in a different way 10^15.17 % [1] 1.479108e+15 This is the same as 1.47 * 10^15 1.47 * 10^15 % [1] 1.47e+15 and the same as paste0(&quot;10^&quot;, round( log10(1.479108e+15), 2)) % [1] &quot;10^15.17&quot; Now if we sum the biomass for the whole last year: (biom &lt;- sum(mdata2$time_line_stocks$TotalStockBiomass[ mdata2$time_line_stocks$Year==max(mdata2$time_line_stocks$Year) ])) % [1] 1.48435e+15 #Converted to base10 scientific paste0(&quot;10^&quot;, round( log10(biom), 2)) % [1] &quot;10^15.17&quot; Thats it. But thats weird, as the same biomass is counted again and again each month. It makes more sense to me to just get the standing biomass for a given month. However, plant biomass peaks not in mid summer, but later. biom &lt;- mdata2$time_line_stocks$TotalStockBiomass[ mdata2$time_line_stocks$Year==max(mdata2$time_line_stocks$Year) ] myY &lt;- seq(0,max(biom), length.out = 5) myY2 &lt;- round(seq(0,log10(max(biom)), length.out = 5), 0) myY2 &lt;- paste0(&quot;10^&quot;, myY2) plot(biom, type=&quot;b&quot;, axes=F, ylab=&quot;Plant biomass (kg)&quot;, xlab=&quot;Month&quot;) axis(1, 1:12, month.abb, las=2) axis(2, myY, myY2) It may be more appropriate to use the max for the last year, or the mean of the max over the last n-years. How do the monthly values compare to Harfoot et al 2014? What about the herbivore data. dat &lt;- mdata2$time_line_cohorts #subset to only the last year dat &lt;- dat[dat$Year == max(dat$Year),] # melt datm &lt;- data.table::melt(dat, id.vars = c(&quot;Year&quot;, &quot;Month&quot;), variable.name = &quot;FG&quot;, value.name = &quot;biomass&quot;) % Warning in data.table::melt(dat, id.vars = c(&quot;Year&quot;, &quot;Month&quot;), variable.name % = &quot;FG&quot;, : The melt generic in data.table has been passed a data.frame and will % attempt to redirect to the relevant reshape2 method; please note that reshape2 % is deprecated, and this redirection is now deprecated as well. To continue using % melt methods from reshape2 while both libraries are attached, e.g. melt.list, % you can prepend the namespace like reshape2::melt(dat). In the next version, % this warning will become an error. datm$tons &lt;- datm$biomass/1000000 ggplot(dat = datm, aes(x = Month, y = tons, colour = FG, linetype=FG))+ geom_line(size=1.5)+ theme_bw(base_size = 12)+ ylab(&quot;Biomass (tons)&quot;) Combining the herbivores datherb &lt;- datm[datm$FG == &quot;Biomass_FG_0&quot; | datm$FG == &quot;Biomass_FG_3&quot; | datm$FG == &quot;Biomass_FG_6&quot; ,] Summed biomass across all months sum(datherb$tons) % [1] 83650.28 Summed for the last month only sum(datherb$tons[datherb$Month==max(datherb$Month)]) % [1] 8374.995 Hoeks et al 2020 give the numbers for total herbivore biomass hoeks &lt;- 10^11.11 #convert to tonnage hoeks &lt;- hoeks/1000 This is a big number, even though the ecosystems are also different. Harfoot et al 2014 get this number fo total herbivore biomass in tons (converted to same spatial extent) 240*16 % [1] 3840 This is lower than all our numbers, but comparable to our max monthly estimate. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
